declare const _default$1: {
    removeFromArray: <T>(array: T[], index: number) => T[];
    updateArray: <T_1>(array: T_1[], index: number, value: T_1) => T_1[];
    uid(prefix: string): string;
    partition<T_2>(predicate: (acc: T_2, idx?: number | undefined, arr?: T_2[] | undefined) => boolean): (subject: T_2[]) => [T_2[], T_2[]];
    toDataUrl(file: File | Blob): Promise<string>;
    debounce(closure: Function, ms: number): (((...args: unknown[]) => Promise<void>) | ((_?: unknown) => any))[];
    l<T_3>(arg: unknown): T_3;
    templatify: (template: unknown) => {
        args: Record<string, unknown>;
    };
};

declare const templatify: (template: unknown) => {
    args: Record<string, unknown>;
};
type Enumerate<N extends number, Acc extends number[] = []> = Acc['length'] extends N ? Acc[number] : Enumerate<N, [...Acc, Acc['length']]>;
type IntegerRange<S extends number, E extends number> = Exclude<Enumerate<E>, Enumerate<S>>;
declare function l<T>(arg: unknown): T;

declare function uid(prefix: string): string;
declare function partition<T>(predicate: (acc: T, idx?: number, arr?: T[]) => boolean): (subject: T[]) => [T[], T[]];
declare function toDataUrl(file: File | Blob): Promise<string>;
declare function debounce(closure: Function, ms: number): (((...args: unknown[]) => Promise<void>) | ((_?: unknown) => any))[];

declare const removeFromArray: <T>(array: T[], index: number) => T[];
declare const updateArray: <T>(array: T[], index: number, value: T) => T[];

interface RGB {
    r: IntegerRange<0, 256>;
    g: IntegerRange<0, 256>;
    b: IntegerRange<0, 256>;
}
interface RGBA extends RGB {
    a: number;
}
interface HSV {
    h: IntegerRange<0, 300>;
    s: number;
    v: number;
}
interface ColorObject {
    rgba: RGBA;
    hsv: HSV;
    hex: string;
    hexa: string;
}

declare const CLR_BLACK = "#000000";
declare const CLR_WHITE = "#FFFFFF";
declare const CLR_OFFWHITE = "#CCD5DB";
declare const constructAlphaBackdrop: (radius: number) => HTMLCanvasElement;
declare const constructLinearGradient: (context: CanvasRenderingContext2D, width: number, height: number, color1: string, color2: string, direction?: string) => void;
declare const constructAlphaGradient: (context: CanvasRenderingContext2D, width: number, height: number, color1: string, color2: string) => void;
declare const constructHueGradient: (context: CanvasRenderingContext2D, width: number) => CanvasGradient;
declare const toHex: (value: number) => string;
declare const toDec: (value: string) => number;
declare const rgbToHex: ({ r, g, b }: RGB) => string;
declare const rgbaToHex: ({ r, g, b, a }: RGBA) => string;
declare const hexToRgb: (hex: string) => RGB;
declare const hexaToRgb: (hex: string) => RGBA;
declare const parseRgbString: (value: string) => RGBA;
declare const rgbToHsv: (rgb: RGB) => {
    h: number;
    s: number;
    v: number;
};
declare const parseColor: (color: unknown, alpha?: number) => RGBA & HSV;

interface DayStatus {
    date: Date;
    isToday: boolean;
    inCurrentMonth: boolean;
}
type AlphabeticalWeekdayFormat = 'long' | 'short' | 'narrow';
type AlphabeticalMonthFormat = 'numeric' | '2-digit' | 'long' | 'short' | 'narrow' | undefined;

declare const _default: {
    weekDays: () => Date[];
    getDaysForDateMonthCycle: (date: Date) => DayStatus[];
    getAlphabeticalWeekday: (date: Date, format?: AlphabeticalWeekdayFormat) => string;
    getAlphabeticalMonth: (date: Date, format?: AlphabeticalMonthFormat) => string;
    isSameDay: (a: Date, b: Date) => boolean;
    isBetween: (date: Date, start: Date, end: Date) => boolean;
    biggerThan: (a: Date, b: Date) => boolean;
    getCalendarDay: (date: Date | undefined, label: string) => string;
};

export { AlphabeticalMonthFormat, AlphabeticalWeekdayFormat, CLR_BLACK, CLR_OFFWHITE, CLR_WHITE, ColorObject, _default as DateUtils, DayStatus, Enumerate, HSV, IntegerRange, RGB, RGBA, _default$1 as Utils, constructAlphaBackdrop, constructAlphaGradient, constructHueGradient, constructLinearGradient, debounce, hexToRgb, hexaToRgb, l, parseColor, parseRgbString, partition, removeFromArray, rgbToHex, rgbToHsv, rgbaToHex, templatify, toDataUrl, toDec, toHex, uid, updateArray };
