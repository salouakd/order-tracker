import * as vue from 'vue';
import { PropType, Component, ComponentInternalInstance, ComponentPublicInstance, DefineComponent, Ref } from 'vue';
import * as prosemirror_state from 'prosemirror-state';
import * as prosemirror_view from 'prosemirror-view';
import { Decoration } from 'prosemirror-view';
import * as tippy_js from 'tippy.js';
import * as _tiptap_core from '@tiptap/core';
import { Editor as Editor$1, EditorOptions, NodeViewRendererOptions, NodeViewRenderer } from '@tiptap/core';
export * from '@tiptap/core';
import { EditorState, Plugin, PluginKey } from '@tiptap/pm/state';
import { Node } from '@tiptap/pm/model';

declare const BubbleMenu: vue.DefineComponent<{
    pluginKey: {
        type: null;
        default: string;
    };
    editor: {
        type: PropType<_tiptap_core.Editor>;
        required: true;
    };
    updateDelay: {
        type: PropType<number | undefined>;
        default: undefined;
    };
    tippyOptions: {
        type: PropType<Partial<tippy_js.Props> | undefined>;
        default: () => {};
    };
    shouldShow: {
        type: PropType<(props: {
            editor: _tiptap_core.Editor;
            view: prosemirror_view.EditorView;
            state: prosemirror_state.EditorState;
            oldState?: prosemirror_state.EditorState | undefined;
            from: number;
            to: number;
        }) => boolean>;
        default: null;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
    pluginKey: {
        type: null;
        default: string;
    };
    editor: {
        type: PropType<_tiptap_core.Editor>;
        required: true;
    };
    updateDelay: {
        type: PropType<number | undefined>;
        default: undefined;
    };
    tippyOptions: {
        type: PropType<Partial<tippy_js.Props> | undefined>;
        default: () => {};
    };
    shouldShow: {
        type: PropType<(props: {
            editor: _tiptap_core.Editor;
            view: prosemirror_view.EditorView;
            state: prosemirror_state.EditorState;
            oldState?: prosemirror_state.EditorState | undefined;
            from: number;
            to: number;
        }) => boolean>;
        default: null;
    };
}>>, {
    updateDelay: number | undefined;
    tippyOptions: Partial<tippy_js.Props> | undefined;
    shouldShow: (props: {
        editor: _tiptap_core.Editor;
        view: prosemirror_view.EditorView;
        state: prosemirror_state.EditorState;
        oldState?: prosemirror_state.EditorState | undefined;
        from: number;
        to: number;
    }) => boolean;
    pluginKey: any;
}>;

interface VueRendererOptions {
    editor: Editor$1;
    props?: Record<string, any>;
}
declare class VueRenderer {
    id: string;
    editor: Editor;
    component: Component;
    teleportElement: Element;
    element: Element;
    props: Record<string, any>;
    constructor(component: Component, { props, editor }: VueRendererOptions);
    get ref(): any;
    updateProps(props?: Record<string, any>): void;
    destroy(): void;
}

declare type ContentComponent = ComponentInternalInstance & {
    ctx: ComponentPublicInstance;
};
declare class Editor extends Editor$1 {
    private reactiveState;
    private reactiveExtensionStorage;
    vueRenderers: Map<string, VueRenderer>;
    contentComponent: ContentComponent | null;
    constructor(options?: Partial<EditorOptions>);
    get state(): EditorState;
    get storage(): Record<string, any>;
    /**
     * Register a ProseMirror plugin.
     */
    registerPlugin(plugin: Plugin, handlePlugins?: (newPlugin: Plugin, plugins: Plugin[]) => Plugin[]): void;
    /**
     * Unregister a ProseMirror plugin.
     */
    unregisterPlugin(nameOrPluginKey: string | PluginKey): void;
}

declare const EditorContent: DefineComponent<{
    editor: {
        default: null;
        type: PropType<Editor>;
    };
}, {
    rootEl: Ref<Element | undefined>;
}, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
    editor: {
        default: null;
        type: PropType<Editor>;
    };
}>>, {
    editor: Editor;
}>;

declare const FloatingMenu: vue.DefineComponent<{
    pluginKey: {
        type: null;
        default: string;
    };
    editor: {
        type: PropType<_tiptap_core.Editor>;
        required: true;
    };
    tippyOptions: {
        type: PropType<Partial<tippy_js.Props> | undefined>;
        default: () => {};
    };
    shouldShow: {
        type: PropType<(props: {
            editor: _tiptap_core.Editor;
            view: prosemirror_view.EditorView;
            state: prosemirror_state.EditorState;
            oldState?: prosemirror_state.EditorState | undefined;
        }) => boolean>;
        default: null;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
    pluginKey: {
        type: null;
        default: string;
    };
    editor: {
        type: PropType<_tiptap_core.Editor>;
        required: true;
    };
    tippyOptions: {
        type: PropType<Partial<tippy_js.Props> | undefined>;
        default: () => {};
    };
    shouldShow: {
        type: PropType<(props: {
            editor: _tiptap_core.Editor;
            view: prosemirror_view.EditorView;
            state: prosemirror_state.EditorState;
            oldState?: prosemirror_state.EditorState | undefined;
        }) => boolean>;
        default: null;
    };
}>>, {
    tippyOptions: Partial<tippy_js.Props> | undefined;
    shouldShow: (props: {
        editor: _tiptap_core.Editor;
        view: prosemirror_view.EditorView;
        state: prosemirror_state.EditorState;
        oldState?: prosemirror_state.EditorState | undefined;
    }) => boolean;
    pluginKey: any;
}>;

declare const NodeViewContent: vue.DefineComponent<{
    as: {
        type: StringConstructor;
        default: string;
    };
}, unknown, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
    as: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    as: string;
}>;

declare const NodeViewWrapper: vue.DefineComponent<{
    as: {
        type: StringConstructor;
        default: string;
    };
}, unknown, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
    as: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    as: string;
}>;

declare const useEditor: (options?: Partial<EditorOptions>) => vue.ShallowRef<Editor | undefined>;

declare const nodeViewProps: {
    editor: {
        type: PropType<_tiptap_core.Editor>;
        required: true;
    };
    node: {
        type: PropType<Node>;
        required: true;
    };
    decorations: {
        type: PropType<Decoration[]>;
        required: true;
    };
    selected: {
        type: PropType<boolean>;
        required: true;
    };
    extension: {
        type: PropType<_tiptap_core.Node<any, any>>;
        required: true;
    };
    getPos: {
        type: PropType<() => number>;
        required: true;
    };
    updateAttributes: {
        type: PropType<(attributes: Record<string, any>) => void>;
        required: true;
    };
    deleteNode: {
        type: PropType<() => void>;
        required: true;
    };
};
interface VueNodeViewRendererOptions extends NodeViewRendererOptions {
    update: ((props: {
        oldNode: Node;
        oldDecorations: Decoration[];
        newNode: Node;
        newDecorations: Decoration[];
        updateProps: () => void;
    }) => boolean) | null;
}
declare function VueNodeViewRenderer(component: Component, options?: Partial<VueNodeViewRendererOptions>): NodeViewRenderer;

export { BubbleMenu, Editor, EditorContent, FloatingMenu, NodeViewContent, NodeViewWrapper, VueNodeViewRenderer, VueNodeViewRendererOptions, VueRenderer, VueRendererOptions, nodeViewProps, useEditor };
