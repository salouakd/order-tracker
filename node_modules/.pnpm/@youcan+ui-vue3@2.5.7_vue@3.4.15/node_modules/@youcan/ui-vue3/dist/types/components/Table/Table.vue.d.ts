import type { TableColumn, TableData, TableProps } from './types';
declare const _default: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TableProps>, {
        actionsText: string;
    }>>> & {
        "onUpdate:selected-rows"?: ((data: TableData[]) => any) | undefined;
        onSort?: ((column: TableColumn, index: number) => any) | undefined;
        onCheck?: ((indexes: number[]) => any) | undefined;
        "onUpdate:data"?: ((data: TableData[]) => any) | undefined;
        "onUpdate:cell"?: ((data: {
            row: unknown;
            accessor: string;
        }) => any) | undefined;
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        sort: (column: TableColumn, index: number) => void;
    } & {
        "update:data": (data: TableData[]) => void;
    } & {
        "update:selected-rows": (data: TableData[]) => void;
    } & {
        check: (indexes: number[]) => void;
    } & {
        "update:cell": (data: {
            row: unknown;
            accessor: string;
        }) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TableProps>, {
        actionsText: string;
    }>>> & {
        "onUpdate:selected-rows"?: ((data: TableData[]) => any) | undefined;
        onSort?: ((column: TableColumn, index: number) => any) | undefined;
        onCheck?: ((indexes: number[]) => any) | undefined;
        "onUpdate:data"?: ((data: TableData[]) => any) | undefined;
        "onUpdate:cell"?: ((data: {
            row: unknown;
            accessor: string;
        }) => any) | undefined;
    }, {
        actionsText: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TableProps>, {
        actionsText: string;
    }>>> & {
        "onUpdate:selected-rows"?: ((data: TableData[]) => any) | undefined;
        onSort?: ((column: TableColumn, index: number) => any) | undefined;
        onCheck?: ((indexes: number[]) => any) | undefined;
        "onUpdate:data"?: ((data: TableData[]) => any) | undefined;
        "onUpdate:cell"?: ((data: {
            row: unknown;
            accessor: string;
        }) => any) | undefined;
    }, {}, {}, {}, {}, {
        actionsText: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TableProps>, {
    actionsText: string;
}>>> & {
    "onUpdate:selected-rows"?: ((data: TableData[]) => any) | undefined;
    onSort?: ((column: TableColumn, index: number) => any) | undefined;
    onCheck?: ((indexes: number[]) => any) | undefined;
    "onUpdate:data"?: ((data: TableData[]) => any) | undefined;
    "onUpdate:cell"?: ((data: {
        row: unknown;
        accessor: string;
    }) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    sort: (column: TableColumn, index: number) => void;
} & {
    "update:data": (data: TableData[]) => void;
} & {
    "update:selected-rows": (data: TableData[]) => void;
} & {
    check: (indexes: number[]) => void;
} & {
    "update:cell": (data: {
        row: unknown;
        accessor: string;
    }) => void;
}, string, {
    actionsText: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
