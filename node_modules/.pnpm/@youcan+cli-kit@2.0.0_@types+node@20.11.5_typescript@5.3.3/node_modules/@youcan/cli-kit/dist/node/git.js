import git from 'simple-git';
import { exec } from './system.js';

async function binaryExists() {
    try {
        await exec('git', ['--version']);
        return true;
    }
    catch {
        return false;
    }
}
async function assertGitExists() {
    if (!(await binaryExists())) {
        throw new Error('Git is required for the setup to continue.');
    }
}
async function clone(cloneOptions) {
    await assertGitExists();
    const { url, destination, shallow, latestTag } = cloneOptions;
    const [repository, branch] = url.split('#');
    const options = { '--recurse-submodules': null };
    // ignore latest tag if branch is provided
    if (branch) {
        options['--branch'] = branch;
    }
    if (shallow && latestTag) {
        throw new Error('Cannot get a shallow clone of the latest branch.');
    }
    if (shallow) {
        options['--depth'] = 1;
    }
    const simpleGitOptions = {
        config: ['core.askpass=true'],
    };
    await git(simpleGitOptions)
        .clone(repository, destination, options);
    if (latestTag) {
        const localRepo = git(destination);
        const latestTag = await getLocalLatestTag(localRepo, url);
        await localRepo.checkout(latestTag);
    }
}
async function getLocalLatestTag(repository, url) {
    const latest = (await repository.tags()).latest;
    if (!latest) {
        throw new Error(`Couldn't infer the latest tag from ${url}`);
    }
    return latest;
}

export { assertGitExists, binaryExists, clone };
