import { createServer } from 'node:http';

class CallbackListener {
    port;
    host;
    server;
    constructor(options) {
        this.port = options.port;
        this.host = options.host;
        this.server = this.create(options.callback);
    }
    start() {
        this.server.listen({ port: this.port, host: this.host }, () => { });
    }
    stop() {
        this.server.close();
    }
    create(callback) {
        const server = async (request, response) => {
            const respond = async (contents, error, state, code) => {
                response.write(contents);
                response.end();
                return callback(this, error, state, code);
            };
            const query = new URL(request.url, `http://${request.headers.host}`).searchParams;
            if (!query.has('code')) {
                return respond('missing code in authorization callback');
            }
            if (!query.has('state')) {
                return respond('missing state in authorization callback');
            }
            return respond('Successfully authenticated, you can now close this window.', undefined, query.get('code'), query.get('state'));
        };
        return createServer(server);
    }
}
async function listen(command, host, port, url) {
    return await new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
            command.output.info('Auto-open timed out, click below to open the login page:');
            command.output.url('Log in to YouCan Partners', url);
        }, 10_000);
        const callback = (listener, error, code, state) => {
            clearTimeout(timeout);
            setTimeout(() => {
                listener.stop();
                if (error) {
                    return reject(error);
                }
                return resolve({ code: code, state: state });
            }, 500);
        };
        const listener = new CallbackListener({ host, port, callback });
        listener.start();
    });
}

export { listen };
