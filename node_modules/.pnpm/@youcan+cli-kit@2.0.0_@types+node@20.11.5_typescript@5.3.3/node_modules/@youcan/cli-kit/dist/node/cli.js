import { Flags, Command as Command$1, ux } from '@oclif/core';
import prompts from 'prompts';
import { truthy } from './context/helpers.js';
import { isDevelopment } from './context/local.js';

function setupEnvVars(options) {
    if (process.argv.includes('--verbose')) {
        process.env.DEBUG = process.env.DEBUG ?? '*';
    }
    if (options.development) {
        process.env.YC_CLI_ENV ??= 'development';
    }
}
function setupColorMode() {
    if (process.argv.includes('--no-color')
        || truthy(process.env.NO_COLOR)
        || truthy(process.env.YC_FLAG_NO_COLOR)
        || process.env.TERM === 'dumb') {
        process.env.FORCE_COLOR = '0';
    }
}
async function exec(options) {
    setupEnvVars(options);
    setupColorMode();
    const { run, settings, flush, Errors } = await import('@oclif/core');
    if (isDevelopment()) {
        settings.debug = true;
    }
    run(undefined, options.moduleUrl)
        .then(() => flush())
        .catch(err => Errors.handle(err));
}
async function execCreate(cmdlet, options) {
    setupEnvVars(options);
    const initIndex = process.argv
        .findIndex(arg => arg.includes('init'));
    if (initIndex === -1) {
        const initIndex = process.argv
            .findIndex(arg => arg.match(new RegExp(`bin(\\/|\\\\)+(create-${cmdlet}|dev|exec)`))) + 1;
        process.argv.splice(initIndex, 0, 'init');
    }
    await exec(options);
}
const commonFlags = {
    'no-color': Flags.boolean({
        hidden: false,
        description: 'Disable color output.',
        env: 'YC_FLAG_NO_COLOR',
    }),
    'verbose': Flags.boolean({
        hidden: false,
        description: 'Increase the verbosity of the logs.',
        env: 'YC_FLAG_VERBOSE',
    }),
};
class Command extends Command$1 {
    output = ux;
    prompt = prompts;
    controller = new AbortController();
    clear() {
        console.clear();
    }
    exit(code) {
        this.controller.abort();
        return super.exit(code);
    }
}

export { Command, commonFlags, exec, execCreate };
