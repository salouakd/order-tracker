import { Writable } from 'node:stream';
import { stdout, stderr } from 'node:process';
import dayjs from 'dayjs';

class Logger extends Writable {
    channel;
    type;
    color;
    constructor(channel, type, color) {
        super();
        this.channel = channel;
        this.type = type;
        this.color = color;
    }
    write(chunk) {
        if (!(chunk instanceof Buffer) && typeof chunk !== 'string') {
            return false;
        }
        const channel = this.channel === 'stdout' ? stdout : stderr;
        const time = dayjs().format('HH:mm:ss:SSS');
        const lines = chunk.toString().split('\n').map(s => s.trim()).filter(s => s !== '');
        for (let i = 0; i < lines.length; i++) {
            i === 0
                ? channel.write(this.color(`${time} | ${this.pad(this.type, 10)} | ${lines[i]}\n`))
                : channel.write(this.color(`                          | ${lines[i]}\n`));
        }
        return true;
    }
    pad(subject, length, char = ' ') {
        return subject.padEnd(length, char);
    }
}
class Abstract {
}

export { Abstract, Logger };
