import fetch from 'node-fetch';
import { is, mergeDeepLeft } from 'ramda';
import './cli.js';
import 'simple-git';
import 'execa';
import 'tcp-port-used';
import 'find-process';
import { get as get$1 } from './env.js';
import 'formdata-node';
import 'formdata-node/file-from-path';
import 'kleur';
import 'conf';
import 'dayjs';
import { get as get$2 } from './session.js';
import './filesystem.js';
import { isJson } from '../common/string.js';

function scheme() {
    return get$1('HOST_ENV') === 'dev' ? 'http' : 'https';
}
async function agent() {
    const { Agent } = await import(scheme());
    return new Agent({ keepAlive: true, keepAliveMsecs: 5 * 60 * 1000 });
}
async function defaults() {
    const session$1 = await get$2();
    return {
        agent: await agent(),
        headers: {
            Accept: 'application/json',
            Authorization: session$1 ? `Bearer ${session$1.access_token}` : undefined,
        },
    };
}
async function request(endpoint, options = {}) {
    if (is(String)(options.body) && isJson(options.body)) {
        options = mergeDeepLeft(options, { headers: { 'Content-Type': 'application/json' } });
    }
    const response = await fetch(endpoint, mergeDeepLeft(options, await defaults()));
    if (!response.ok) {
        throw new Error(await response.text(), { cause: response });
    }
    return response.json();
}
async function get(endpoint, options = {}) {
    return request(`${scheme()}://${endpoint}`, { ...options, method: 'GET' });
}
async function post(endpoint, options = {}) {
    return request(`${scheme()}://${endpoint}`, { ...options, method: 'POST' });
}

export { get, post, scheme };
