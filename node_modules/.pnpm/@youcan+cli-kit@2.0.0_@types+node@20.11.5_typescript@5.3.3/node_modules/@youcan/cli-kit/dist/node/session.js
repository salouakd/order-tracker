import './cli.js';
import 'simple-git';
import { isPortAvailable, getPortProcessName, killPortProcess, open } from './system.js';
import { apiHostname, oauthClientId, oauthClientSecret, sellerAreaHostname } from './env.js';
import { get as get$1, post } from './http.js';
import 'formdata-node';
import 'formdata-node/file-from-path';
import 'kleur';
import { manager } from './config.js';
import { randomHex } from './crypto.js';
import 'dayjs';
import { listen } from './callback.js';
import './filesystem.js';
import 'change-case';

const LS_PORT = 3000;
const LS_HOST = 'localhost';
async function isSessionValid(session) {
    try {
        const store = await get$1(`${apiHostname()}/me`, { headers: { Authorization: `Bearer ${session.access_token}` } });
        return store.status === 1;
    }
    catch (err) {
        return false;
    }
}
async function exchange(code) {
    const params = {
        code,
        client_id: oauthClientId(),
        grant_type: 'authorization_code',
        client_secret: oauthClientSecret(),
        redirect_uri: `http://${LS_HOST}:${LS_PORT}/`,
    };
    const result = await post(`${apiHostname()}/oauth/token`, {
        body: new URLSearchParams(Object.entries(params)),
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    });
    return result.access_token;
}
async function authorize(command, state = randomHex(30)) {
    const AUTHORIZATION_URL = sellerAreaHostname();
    if (!await isPortAvailable(LS_PORT)) {
        command.output.warn(`Port ${LS_PORT} is unavailable, but it is required for authentication.`);
        const { confirmed } = await command.prompt({
            type: 'confirm',
            name: 'confirmed',
            initial: true,
            message: `Would you like to terminate ${await getPortProcessName(LS_PORT)}?`,
        });
        if (!confirmed) {
            throw new Error('Exiting..');
        }
        await killPortProcess(LS_PORT);
    }
    const params = {
        state,
        response_type: 'code',
        scope: '*',
        client_id: oauthClientId(),
        redirect_url: `http://${LS_HOST}:${LS_PORT}/`,
    };
    await command.output.anykey('Press any key to open the login page on your browser..');
    const url = `http://${AUTHORIZATION_URL}/admin/oauth/authorize?${new URLSearchParams(params).toString()}`;
    open(url);
    const result = await listen(command, LS_HOST, LS_PORT, url);
    if (result.state !== state) {
        throw new Error('Authorization state mismatch..');
    }
    return result.code;
}
async function get() {
    return manager({ projectName: 'youcan-cli' })
        .get('store_session') ?? null;
}
async function authenticate(command) {
    const existingSession = manager({ projectName: 'youcan-cli' })
        .get('store_session');
    if (existingSession && await isSessionValid(existingSession)) {
        return existingSession;
    }
    const accessToken = await exchange(await authorize(command));
    const store = await get$1(`${apiHostname()}/me`, { headers: { Authorization: `Bearer ${accessToken}` } });
    const session = {
        slug: store.slug,
        id: store.id,
        access_token: accessToken,
    };
    manager({ projectName: 'youcan-cli' })
        .set('store_session', session);
    return session;
}

export { authenticate, get };
