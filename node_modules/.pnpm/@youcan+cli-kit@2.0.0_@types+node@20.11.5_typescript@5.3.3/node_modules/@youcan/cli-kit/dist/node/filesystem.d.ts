/// <reference types="node" />
/// <reference types="node" />
import type { Mode, OpenMode, PathLike, Stats } from 'fs';
import type { Options as GlobOptions, Pattern } from 'fast-glob';
import chokidar from 'chokidar';
export declare function exists(path: string): Promise<boolean>;
export declare function tapIntoTmp<T>(callback: (tmp: string) => T | Promise<T>): Promise<T>;
export declare function mkdir(path: string): Promise<void>;
interface MoveFileOptions {
    overwrite?: boolean;
}
export declare function move(src: string, dest: string, options?: MoveFileOptions): Promise<void>;
export declare function readFile(path: PathLike, options?: {
    encoding?: BufferEncoding;
    flag?: OpenMode;
}): Promise<Buffer | string>;
export declare function writeFile(path: PathLike, data: string, options?: {
    encoding: BufferEncoding;
    flag: Mode;
}): Promise<void>;
export declare function readJsonFile<T = Record<string, unknown>>(path: PathLike): Promise<T>;
export declare function writeJsonFile(path: PathLike, data: Record<string, unknown>): Promise<void>;
export declare function glob(pattern: Pattern | Pattern[], options?: GlobOptions): Promise<string[]>;
export declare function archived(path: string, name: string, glob?: string): Promise<string>;
export declare function unlink(path: string): Promise<void>;
export declare function readdir(path: string): Promise<string[]>;
export declare function stat(path: string): Promise<Stats>;
export declare const watch: typeof chokidar.watch;
export {};
