/// <reference types="node" />
/// <reference types="node" />
import type { Readable, Writable } from 'stream';
export interface ExecOptions {
    cwd?: string;
    env?: {
        [key: string]: string | undefined;
    };
    stdin?: Readable | 'inherit';
    stdout?: Writable | 'inherit';
    stderr?: Writable | 'inherit';
    stdio?: 'inherit';
    input?: string;
    signal?: AbortSignal;
    errorHandler?: (error: unknown) => Promise<void>;
}
export declare function exec(command: string, args: string[], options?: ExecOptions): Promise<void>;
export declare function isPortAvailable(port: number): Promise<boolean>;
export declare function getPortProcessName(port: number): Promise<string>;
export declare function killPortProcess(port: number): Promise<void>;
export declare function open(url: string): Promise<void>;
