"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/highlight.ts





var _core = require('@tiptap/core');
var inputRegex = /(?:^|\s)((?:==)((?:[^~=]+))(?:==))$/;
var pasteRegex = /(?:^|\s)((?:==)((?:[^~=]+))(?:==))/g;
var Highlight = _core.Mark.create({
  name: "highlight",
  addOptions() {
    return {
      multicolor: false,
      HTMLAttributes: {}
    };
  },
  addAttributes() {
    if (!this.options.multicolor) {
      return {};
    }
    return {
      color: {
        default: null,
        parseHTML: (element) => element.getAttribute("data-color") || element.style.backgroundColor,
        renderHTML: (attributes) => {
          if (!attributes.color) {
            return {};
          }
          return {
            "data-color": attributes.color,
            style: `background-color: ${attributes.color}; color: inherit`
          };
        }
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "mark"
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["mark", _core.mergeAttributes.call(void 0, this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      setHighlight: (attributes) => ({ commands }) => {
        return commands.setMark(this.name, attributes);
      },
      toggleHighlight: (attributes) => ({ commands }) => {
        return commands.toggleMark(this.name, attributes);
      },
      unsetHighlight: () => ({ commands }) => {
        return commands.unsetMark(this.name);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-h": () => this.editor.commands.toggleHighlight()
    };
  },
  addInputRules() {
    return [
      _core.markInputRule.call(void 0, {
        find: inputRegex,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      _core.markPasteRule.call(void 0, {
        find: pasteRegex,
        type: this.type
      })
    ];
  }
});

// src/index.ts
var src_default = Highlight;





exports.Highlight = Highlight; exports.default = src_default; exports.inputRegex = inputRegex; exports.pasteRegex = pasteRegex;
